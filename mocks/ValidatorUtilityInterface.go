// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ValidatorUtilityInterface is an autogenerated mock type for the ValidatorUtilityInterface type
type ValidatorUtilityInterface struct {
	mock.Mock
}

// LoginValidation provides a mock function with given fields: email, password
func (_m *ValidatorUtilityInterface) LoginValidation(email string, password string) error {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterValidator provides a mock function with given fields: username, email, password
func (_m *ValidatorUtilityInterface) RegisterValidator(username string, email string, password string) error {
	ret := _m.Called(username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(username, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewValidatorUtilityInterface creates a new instance of ValidatorUtilityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorUtilityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorUtilityInterface {
	mock := &ValidatorUtilityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
