// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cartitems "ecommerce/internal/features/cartitems"

	mock "github.com/stretchr/testify/mock"

	orders "ecommerce/internal/features/orders"
)

// Query is an autogenerated mock type for the Query type
type Query struct {
	mock.Mock
}

// Checkout provides a mock function with given fields: UserID, newOrder, cartItems
func (_m *Query) Checkout(UserID uint, newOrder orders.Order, cartItems []cartitems.CartItem) error {
	ret := _m.Called(UserID, newOrder, cartItems)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, orders.Order, []cartitems.CartItem) error); ok {
		r0 = rf(UserID, newOrder, cartItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrderItems provides a mock function with given fields: orderID, newOrderItems
func (_m *Query) CreateOrderItems(orderID uint, newOrderItems []cartitems.CartItem) error {
	ret := _m.Called(orderID, newOrderItems)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, []cartitems.CartItem) error); ok {
		r0 = rf(orderID, newOrderItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrders provides a mock function with given fields: newOrders
func (_m *Query) CreateOrders(newOrders orders.Order) (uint, error) {
	ret := _m.Called(newOrders)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrders")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(orders.Order) (uint, error)); ok {
		return rf(newOrders)
	}
	if rf, ok := ret.Get(0).(func(orders.Order) uint); ok {
		r0 = rf(newOrders)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(orders.Order) error); ok {
		r1 = rf(newOrders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrder provides a mock function with given fields: UserID
func (_m *Query) GetAllOrder(UserID uint) ([]orders.Order, error) {
	ret := _m.Called(UserID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrder")
	}

	var r0 []orders.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]orders.Order, error)); ok {
		return rf(UserID)
	}
	if rf, ok := ret.Get(0).(func(uint) []orders.Order); ok {
		r0 = rf(UserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(UserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItems provides a mock function with given fields: OrderID
func (_m *Query) GetOrderItems(OrderID uint) ([]orders.OrderItems, error) {
	ret := _m.Called(OrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItems")
	}

	var r0 []orders.OrderItems
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]orders.OrderItems, error)); ok {
		return rf(OrderID)
	}
	if rf, ok := ret.Get(0).(func(uint) []orders.OrderItems); ok {
		r0 = rf(OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.OrderItems)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: OrderID, updateOrder
func (_m *Query) UpdateOrder(OrderID uint, updateOrder orders.Order) error {
	ret := _m.Called(OrderID, updateOrder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, orders.Order) error); ok {
		r0 = rf(OrderID, updateOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuery creates a new instance of Query. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *Query {
	mock := &Query{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
