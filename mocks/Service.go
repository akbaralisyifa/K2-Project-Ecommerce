// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cartitems "ecommerce/internal/features/cartitems"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddCartItem provides a mock function with given fields: newCartItems, userID
func (_m *Service) AddCartItem(newCartItems cartitems.CartItem, userID uint) error {
	ret := _m.Called(newCartItems, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cartitems.CartItem, uint) error); ok {
		r0 = rf(newCartItems, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: productID, userID
func (_m *Service) DeleteCartItem(productID uint, userID uint) error {
	ret := _m.Called(productID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(productID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItemByUserID provides a mock function with given fields: UserID
func (_m *Service) DeleteCartItemByUserID(UserID uint) error {
	ret := _m.Called(UserID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartItemByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCartItems provides a mock function with given fields: userID
func (_m *Service) GetAllCartItems(userID uint) ([]cartitems.CartItem, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCartItems")
	}

	var r0 []cartitems.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]cartitems.CartItem, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []cartitems.CartItem); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cartitems.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
